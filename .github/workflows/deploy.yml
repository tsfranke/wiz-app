name: Deploy to ECR

on:
  push:
    branches: [ main ]

jobs:
  deploy:
    runs-on: ubuntu-latest
    environment: wiz
    
    steps:
    - uses: actions/checkout@v4
    
    - name: Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: '18'
    
    - name: Install dependencies
      run: npm install
    
    - name: Run npm audit
      run: |
        npm audit --audit-level=high --json > audit-results.json || true
        if [ $(jq '.metadata.vulnerabilities.high + .metadata.vulnerabilities.critical' audit-results.json) -gt 0 ]; then
          echo "::error::High or critical vulnerabilities found in npm packages"
          npm audit --audit-level=high
          exit 1
        fi
    
    - name: Configure AWS credentials
      uses: aws-actions/configure-aws-credentials@v4
      with:
        aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
        aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
        aws-region: us-east-1
    
    - name: Login to Amazon ECR
      id: login-ecr
      uses: aws-actions/amazon-ecr-login@v2
    
    - name: Build and push Docker image
      env:
        ECR_REGISTRY: ${{ steps.login-ecr.outputs.registry }}
        ECR_REPOSITORY: todoapp
      run: |
        TIMESTAMP=$(date +%Y%m%d-%H%M%S)
        docker build -t $ECR_REGISTRY/$ECR_REPOSITORY:$TIMESTAMP .
        docker build -t $ECR_REGISTRY/$ECR_REPOSITORY:latest .
        docker push $ECR_REGISTRY/$ECR_REPOSITORY:$TIMESTAMP
        docker push $ECR_REGISTRY/$ECR_REPOSITORY:latest
        echo "IMAGE_TAG=$TIMESTAMP" >> $GITHUB_ENV
        echo "ECR_REGISTRY=$ECR_REGISTRY" >> $GITHUB_ENV
    
    - name: Wait for ECR scan and check results
      run: |
        echo "Waiting for ECR vulnerability scan to complete..."
        sleep 30
        
        SCAN_STATUS=$(aws ecr describe-image-scan-findings --repository-name todoapp --image-id imageTag=${{ env.IMAGE_TAG }} --query 'imageScanStatus.status' --output text 2>/dev/null || echo "IN_PROGRESS")
        
        while [ "$SCAN_STATUS" = "IN_PROGRESS" ]; do
          echo "Scan still in progress, waiting..."
          sleep 15
          SCAN_STATUS=$(aws ecr describe-image-scan-findings --repository-name todoapp --image-id imageTag=${{ env.IMAGE_TAG }} --query 'imageScanStatus.status' --output text 2>/dev/null || echo "IN_PROGRESS")
        done
        
        if [ "$SCAN_STATUS" = "COMPLETE" ]; then
          HIGH_CRITICAL=$(aws ecr describe-image-scan-findings --repository-name todoapp --image-id imageTag=${{ env.IMAGE_TAG }} --query 'imageScanFindings.findingCounts.HIGH + imageScanFindings.findingCounts.CRITICAL' --output text 2>/dev/null || echo "0")
          
          if [ "$HIGH_CRITICAL" != "None" ] && [ "$HIGH_CRITICAL" -gt 0 ]; then
            echo "::error::ECR scan found $HIGH_CRITICAL high/critical vulnerabilities"
            aws ecr describe-image-scan-findings --repository-name todoapp --image-id imageTag=${{ env.IMAGE_TAG }} --query 'imageScanFindings.findings[?severity==`HIGH` || severity==`CRITICAL`]'
            exit 1
          else
            echo "ECR scan passed - no high/critical vulnerabilities found"
          fi
        else
          echo "::warning::ECR scan failed or incomplete"
        fi
    
    - name: Update EKS kubeconfig
      run: |
        aws eks update-kubeconfig --region us-east-1 --name wiz-cluster
    
    - name: Update Kubernetes deployment
      run: |
        kubectl set image deployment/todoapp todoapp=${{ env.ECR_REGISTRY }}/todoapp:${{ env.IMAGE_TAG }}
        kubectl rollout status deployment/todoapp
